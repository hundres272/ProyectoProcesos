/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoprocesos;

import java.util.ArrayList;
import java.util.Random;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hugoa_kaskhih
 */
public class VentanaPrincipal extends javax.swing.JDialog {
    private DefaultListModel modelList1,modelList2,modelList3;
    private DefaultTableModel modelTable;
    private String[] namesProcess = {"Proceso 1","Proceso 2","Proceso 3","Proceso 4","Proceso 5"};
    private ArrayList<Proceso> arraylist = new ArrayList();
    private ArrayList<Proceso> arraylistAux1 = new ArrayList();
    private ArrayList<Proceso> arraylistAux2 = new ArrayList();
    private ArrayList<Integer> availabilityPID = new ArrayList();
    private int valueMax = 0;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
        drivingListOne();
    }
    
    private void drivingListOne(){
        modelList1 = new DefaultListModel();
        modelList2 = new DefaultListModel();
        modelList3 = new DefaultListModel();
        for (int i = 0; i < namesProcess.length; i++) {
            modelList2.addElement(namesProcess[i]);
        }
        jList2.setModel(modelList2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        startProcess = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        stepByStep = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane2.setViewportView(jList2);

        startProcess.setText("Iniciar Proceso");
        startProcess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                startProcessMouseReleased(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tiempo procesador", "Prioridad", "PID", "Interacción Usua.", "% Ejecución"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Estado Inactivo");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Estado Preparado");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("En Ejecución");

        jButton1.setText("+");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Estado Suspendido");

        stepByStep.setText("Paso a paso");
        stepByStep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                stepByStepMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(210, 210, 210))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)
                        .addGap(2, 2, 2)
                        .addComponent(startProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(552, 552, 552)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stepByStep)
                        .addGap(55, 55, 55))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(266, 266, 266)
                .addComponent(jLabel4)
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startProcess)
                    .addComponent(jButton1)
                    .addComponent(stepByStep))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startProcessMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startProcessMouseReleased
        modelTable = (DefaultTableModel) jTable1.getModel();
        try {
            int number = jList2.getSelectedIndex();
            String processText = jList2.getModel().getElementAt(number);
            
           
            Proceso newProcess = new Proceso(processText,generatePid());
            modifyTable(newProcess);
            
            modelList2.remove(number);
        } catch (ArrayIndexOutOfBoundsException ex) {
            if(Integer.parseInt(ex.getMessage()) == -1){
                JOptionPane.showMessageDialog(null, "Seleccione un proceso");
            }
        }
        int auxCont = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            auxCont = (int)modelTable.getValueAt(i, 1);
            if (auxCont > valueMax) {
                valueMax = auxCont;
            }
        }
    }//GEN-LAST:event_startProcessMouseReleased

    private void modifyTable(Proceso newProcess){
        boolean aux = true;
        
        if(arraylist.size() != 0){
            for (int i = 0; i < arraylist.size(); i++) {
                if (arraylist.get(i).getTimeMin() != newProcess.getTimeMin()) {
                    if (arraylist.get(i).getTimeMin() > newProcess.getTimeMin()) {
                        arraylist.add(i, newProcess);
                        aux = false;
                        break;
                    }
                }else if(arraylist.get(i).getPriority() != newProcess.getPriority()){
                    if (arraylist.get(i).getPriority() > newProcess.getPriority()) {
                        arraylist.add(i, newProcess);
                        aux = false;
                        break;
                    }
                }else if(arraylist.get(i).getPid() > newProcess.getPid()){
                    arraylist.add(i, newProcess);
                    aux = false;
                    break;
                }
            }
        }
        if(aux){
             arraylist.add((arraylist.size()),newProcess);
        }
        for (int i = (modelTable.getRowCount()-1); i >= 0; i--) {
            modelTable.removeRow(0);
        }
        for (int i = 0; i < arraylist.size(); i++) {
            modelTable.addRow((Object[]) arraylist.get(i).rowinfo());
        }
    }
    
    private void stepByStepMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stepByStepMouseReleased
        try {
            if(jList1.getModel().getSize()!=0 || (jList3.getModel().getSize()!=0 || jTable1.getRowCount()>0)){
                if(jTable1.getRowCount()>0){
                    if (jList1.getModel().getSize()!=0) {
                        if (arraylistAux1.get(0).getPercentage() >= 100.0) {
                            modelList2.addElement(arraylistAux1.get(0).getNameProc());
                            arraylistAux1.remove(0);
                            modelList1.removeAllElements();
                            jList1.setModel(modelList1);
                            jList2.setModel(modelList2);
                        }else{
                            float auxPorcentaje = arraylistAux1.get(0).getPercentage();
                            int auxTimemin = arraylistAux1.get(0).getTimeMin();
                            int auxRataC = arraylistAux1.get(0).getRataCuantum();
                            float result = (float)(auxPorcentaje+((auxTimemin/auxRataC)*100/valueMax));
                            arraylistAux1.get(0).setPercentage(result,valueMax);
                            arraylistAux2.add(arraylistAux1.get(0));
                            arraylistAux1.remove(0);
                            modelList1.removeAllElements();
                            jList1.setModel(modelList1);
                            
                            try {
                                manejoEspecialList3();
                            } catch (Exception e) {
                                System.out.println("error inesperado 1.2"+e);
                            }
                        }
                    }
                    arraylistAux1.add(arraylist.get(0));
                    arraylist.remove(0);
                    modelTable.removeRow(0);
                    jTable1.setModel(modelTable);
                    String info = "<html>Nombre proceso: "+arraylistAux1.get(0).getNameProc()+
                                  "<br>Pid: "+arraylistAux1.get(0).getPid()+
                                  "<br>Interacciones con el usuario: "+arraylistAux1.get(0).getUserResponse()
                                + "<br>Porcentaje ejecutado: "+arraylistAux1.get(0).getPercentage()+"%</html>";
                    modelList1.addElement(info);
                    jList1.setModel(modelList1);
                }else if(jList1.getModel().getSize()!=0){
                    if (arraylistAux1.get(0).getPercentage() >= 100.0) {
                        modelList2.addElement(arraylistAux1.get(0).getNameProc());
                        arraylistAux1.remove(0);
                        modelList1.removeAllElements();
                        jList1.setModel(modelList1);
                        jList2.setModel(modelList2);
                    }else{
                        float auxPorcentaje = arraylistAux1.get(0).getPercentage();
                        int auxTimemin = arraylistAux1.get(0).getTimeMin();
                        int auxRataC = arraylistAux1.get(0).getRataCuantum();
                        float result = (float)(auxPorcentaje+((auxTimemin/auxRataC)*100/valueMax));
                        arraylistAux1.get(0).setPercentage(result,valueMax);
                        arraylistAux2.add(arraylistAux1.get(0));
                        arraylistAux1.remove(0);
                        modelList1.removeAllElements();
                        jList1.setModel(modelList1);

                        try {
                            manejoEspecialList3();
                        } catch (Exception e) {
                            System.out.println("error inesperado 1.2"+e);
                        }
                    }
                }else{
                    manejoEspecialList3();
                    System.out.println("uiii");
                }
            }else{
//                System.out.println("error ines 7");
    //            Debe tener en cuenta los casos de ejecución y pausa
                JOptionPane.showMessageDialog(null, "Primero comience un proceso");
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println("Error inesperado");
        }
        
    }//GEN-LAST:event_stepByStepMouseReleased

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        String newNameProcess = JOptionPane.showInputDialog("Nombre del nuevo proceso:");
        modelList2.addElement(newNameProcess);
        jList2.setModel(modelList2);
    }//GEN-LAST:event_jButton1MouseReleased

    private void manejoEspecialList3(){
//        ArrayList<Integer> auxIndex = new ArrayList<>();
        
        if (arraylistAux2.size() > 0) {
            for (int i = 0; i < arraylistAux2.size(); i++) {
                if (arraylistAux2.get(i).getUserResponse()>0) {
                    if (arraylistAux2.get(i).getAuxUserResponse() == 0) {
                        Proceso newProcess = new Proceso(arraylistAux2.get(i).getNameProc(),
                                                         arraylistAux2.get(i).getPid(),
                                                         arraylistAux2.get(i).getUserResponse()-1,
                                                         arraylistAux2.get(i).getTimeMin(),
                                                         arraylistAux2.get(i).getPercentage());
                        arraylistAux2.remove(i);
//                        auxIndex.add(i);
i--;
                        modifyTable(newProcess);
                    }else{
                        arraylistAux2.get(i).setAuxUserResponse(arraylistAux2.get(i).getAuxUserResponse()-1);
                    }
                }else{
                    if (arraylistAux2.get(i).getAuxUserResponse() == 0){
                        Proceso newProcess = new Proceso(arraylistAux2.get(i).getNameProc(),
                                                        arraylistAux2.get(i).getPid(),0,
                                                        arraylistAux2.get(i).getTimeMin(),
                                                        arraylistAux2.get(i).getPercentage());
                       arraylistAux2.remove(i);
//                        auxIndex.add(i);
i--;
                        modifyTable(newProcess);
                    }else{
                        arraylistAux2.get(i).setAuxUserResponse(arraylistAux2.get(i).getAuxUserResponse()-2);
                    }
                }
            }
        }
//        for (int i = 0; i < auxIndex.size(); i++) {
//            System.out.println("borrados: "+arraylistAux2.get(i).getNameProc());
//            arraylistAux2.remove(auxIndex.get(i));
//        }
//        for (int i = 0; i < arraylistAux2.size(); i++) {
//            System.out.println("hola: "+arraylistAux2.get(i).getNameProc());
//        }
        try {
            removeList3();
        } catch (Exception e) {
            System.out.println("error raro aqui 2");
        }
    }
    
    private void removeList3(){
        modelList3.removeAllElements();
        for (int i = 0; i < arraylistAux2.size(); i++) {
            String info = "<html><br>Nombre proc.: "+arraylistAux2.get(i).getNameProc()
                    + "<br>PID: "+arraylistAux2.get(i).getPid()
                    +"<br>Interacciones Usuario: "+arraylistAux2.get(i).getUserResponse()
                    +"<br>Porcentaje ejecutado: "+arraylistAux2.get(i).getPercentage()+"%<br></html>";
            modelList3.addElement(info);
        }
        jList3.setModel(modelList3);
    }
    
    private int generatePid(){
        if (availabilityPID.size()>0) {
            for (int i = 0; i < availabilityPID.size(); i++) {
                if (availabilityPID.get(i)!=(i+1)) {
                    availabilityPID.add(i, (i+1));
                    return i+1;
                }
            }
            availabilityPID.add(availabilityPID.size()+1);
            return availabilityPID.size();
        }else{
            availabilityPID.add(1);
            return 1;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton startProcess;
    private javax.swing.JButton stepByStep;
    // End of variables declaration//GEN-END:variables
}
